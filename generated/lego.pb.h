// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lego.proto

#ifndef PROTOBUF_lego_2eproto__INCLUDED
#define PROTOBUF_lego_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_lego_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGetRequestImpl();
void InitDefaultsGetRequest();
void InitDefaultsLegoRecordFieldImpl();
void InitDefaultsLegoRecordField();
void InitDefaultsLegoRecordSectionImpl();
void InitDefaultsLegoRecordSection();
void InitDefaultsLegoRecordImpl();
void InitDefaultsLegoRecord();
void InitDefaultsLegoResponseImpl();
void InitDefaultsLegoResponse();
void InitDefaultsQuestionImpl();
void InitDefaultsQuestion();
void InitDefaultsPageImpl();
void InitDefaultsPage();
void InitDefaultsTemplateImpl();
void InitDefaultsTemplate();
inline void InitDefaults() {
  InitDefaultsGetRequest();
  InitDefaultsLegoRecordField();
  InitDefaultsLegoRecordSection();
  InitDefaultsLegoRecord();
  InitDefaultsLegoResponse();
  InitDefaultsQuestion();
  InitDefaultsPage();
  InitDefaultsTemplate();
}
}  // namespace protobuf_lego_2eproto
namespace lego {
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class LegoRecord;
class LegoRecordDefaultTypeInternal;
extern LegoRecordDefaultTypeInternal _LegoRecord_default_instance_;
class LegoRecordField;
class LegoRecordFieldDefaultTypeInternal;
extern LegoRecordFieldDefaultTypeInternal _LegoRecordField_default_instance_;
class LegoRecordSection;
class LegoRecordSectionDefaultTypeInternal;
extern LegoRecordSectionDefaultTypeInternal _LegoRecordSection_default_instance_;
class LegoResponse;
class LegoResponseDefaultTypeInternal;
extern LegoResponseDefaultTypeInternal _LegoResponse_default_instance_;
class Page;
class PageDefaultTypeInternal;
extern PageDefaultTypeInternal _Page_default_instance_;
class Question;
class QuestionDefaultTypeInternal;
extern QuestionDefaultTypeInternal _Question_default_instance_;
class Template;
class TemplateDefaultTypeInternal;
extern TemplateDefaultTypeInternal _Template_default_instance_;
}  // namespace lego
namespace lego {

// ===================================================================

class GetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GetRequest* other);
  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string flag = 1;
  void clear_flag();
  static const int kFlagFieldNumber = 1;
  const ::std::string& flag() const;
  void set_flag(const ::std::string& value);
  #if LANG_CXX11
  void set_flag(::std::string&& value);
  #endif
  void set_flag(const char* value);
  void set_flag(const char* value, size_t size);
  ::std::string* mutable_flag();
  ::std::string* release_flag();
  void set_allocated_flag(::std::string* flag);

  // @@protoc_insertion_point(class_scope:lego.GetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr flag_;
  mutable int _cached_size_;
  friend struct ::protobuf_lego_2eproto::TableStruct;
  friend void ::protobuf_lego_2eproto::InitDefaultsGetRequestImpl();
};
// -------------------------------------------------------------------

class LegoRecordField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.LegoRecordField) */ {
 public:
  LegoRecordField();
  virtual ~LegoRecordField();

  LegoRecordField(const LegoRecordField& from);

  inline LegoRecordField& operator=(const LegoRecordField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LegoRecordField(LegoRecordField&& from) noexcept
    : LegoRecordField() {
    *this = ::std::move(from);
  }

  inline LegoRecordField& operator=(LegoRecordField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LegoRecordField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LegoRecordField* internal_default_instance() {
    return reinterpret_cast<const LegoRecordField*>(
               &_LegoRecordField_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LegoRecordField* other);
  friend void swap(LegoRecordField& a, LegoRecordField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LegoRecordField* New() const PROTOBUF_FINAL { return New(NULL); }

  LegoRecordField* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LegoRecordField& from);
  void MergeFrom(const LegoRecordField& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LegoRecordField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:lego.LegoRecordField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_lego_2eproto::TableStruct;
  friend void ::protobuf_lego_2eproto::InitDefaultsLegoRecordFieldImpl();
};
// -------------------------------------------------------------------

class LegoRecordSection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.LegoRecordSection) */ {
 public:
  LegoRecordSection();
  virtual ~LegoRecordSection();

  LegoRecordSection(const LegoRecordSection& from);

  inline LegoRecordSection& operator=(const LegoRecordSection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LegoRecordSection(LegoRecordSection&& from) noexcept
    : LegoRecordSection() {
    *this = ::std::move(from);
  }

  inline LegoRecordSection& operator=(LegoRecordSection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LegoRecordSection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LegoRecordSection* internal_default_instance() {
    return reinterpret_cast<const LegoRecordSection*>(
               &_LegoRecordSection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LegoRecordSection* other);
  friend void swap(LegoRecordSection& a, LegoRecordSection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LegoRecordSection* New() const PROTOBUF_FINAL { return New(NULL); }

  LegoRecordSection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LegoRecordSection& from);
  void MergeFrom(const LegoRecordSection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LegoRecordSection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lego.LegoRecordField fields = 3;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 3;
  const ::lego::LegoRecordField& fields(int index) const;
  ::lego::LegoRecordField* mutable_fields(int index);
  ::lego::LegoRecordField* add_fields();
  ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordField >*
      mutable_fields();
  const ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordField >&
      fields() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:lego.LegoRecordSection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordField > fields_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_lego_2eproto::TableStruct;
  friend void ::protobuf_lego_2eproto::InitDefaultsLegoRecordSectionImpl();
};
// -------------------------------------------------------------------

class LegoRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.LegoRecord) */ {
 public:
  LegoRecord();
  virtual ~LegoRecord();

  LegoRecord(const LegoRecord& from);

  inline LegoRecord& operator=(const LegoRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LegoRecord(LegoRecord&& from) noexcept
    : LegoRecord() {
    *this = ::std::move(from);
  }

  inline LegoRecord& operator=(LegoRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LegoRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LegoRecord* internal_default_instance() {
    return reinterpret_cast<const LegoRecord*>(
               &_LegoRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LegoRecord* other);
  friend void swap(LegoRecord& a, LegoRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LegoRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  LegoRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LegoRecord& from);
  void MergeFrom(const LegoRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LegoRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lego.LegoRecordSection sections = 3;
  int sections_size() const;
  void clear_sections();
  static const int kSectionsFieldNumber = 3;
  const ::lego::LegoRecordSection& sections(int index) const;
  ::lego::LegoRecordSection* mutable_sections(int index);
  ::lego::LegoRecordSection* add_sections();
  ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordSection >*
      mutable_sections();
  const ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordSection >&
      sections() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:lego.LegoRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordSection > sections_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_lego_2eproto::TableStruct;
  friend void ::protobuf_lego_2eproto::InitDefaultsLegoRecordImpl();
};
// -------------------------------------------------------------------

class LegoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.LegoResponse) */ {
 public:
  LegoResponse();
  virtual ~LegoResponse();

  LegoResponse(const LegoResponse& from);

  inline LegoResponse& operator=(const LegoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LegoResponse(LegoResponse&& from) noexcept
    : LegoResponse() {
    *this = ::std::move(from);
  }

  inline LegoResponse& operator=(LegoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LegoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LegoResponse* internal_default_instance() {
    return reinterpret_cast<const LegoResponse*>(
               &_LegoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(LegoResponse* other);
  friend void swap(LegoResponse& a, LegoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LegoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LegoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LegoResponse& from);
  void MergeFrom(const LegoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LegoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  ::google::protobuf::int32 success() const;
  void set_success(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lego.LegoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 success_;
  mutable int _cached_size_;
  friend struct ::protobuf_lego_2eproto::TableStruct;
  friend void ::protobuf_lego_2eproto::InitDefaultsLegoResponseImpl();
};
// -------------------------------------------------------------------

class Question : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.Question) */ {
 public:
  Question();
  virtual ~Question();

  Question(const Question& from);

  inline Question& operator=(const Question& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Question(Question&& from) noexcept
    : Question() {
    *this = ::std::move(from);
  }

  inline Question& operator=(Question&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Question& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Question* internal_default_instance() {
    return reinterpret_cast<const Question*>(
               &_Question_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Question* other);
  friend void swap(Question& a, Question& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Question* New() const PROTOBUF_FINAL { return New(NULL); }

  Question* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Question& from);
  void MergeFrom(const Question& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Question* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // int32 response_type = 3;
  void clear_response_type();
  static const int kResponseTypeFieldNumber = 3;
  ::google::protobuf::int32 response_type() const;
  void set_response_type(::google::protobuf::int32 value);

  // int32 order = 5;
  void clear_order();
  static const int kOrderFieldNumber = 5;
  ::google::protobuf::int32 order() const;
  void set_order(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lego.Question)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int32 response_type_;
  ::google::protobuf::int32 order_;
  mutable int _cached_size_;
  friend struct ::protobuf_lego_2eproto::TableStruct;
  friend void ::protobuf_lego_2eproto::InitDefaultsQuestionImpl();
};
// -------------------------------------------------------------------

class Page : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.Page) */ {
 public:
  Page();
  virtual ~Page();

  Page(const Page& from);

  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Page(Page&& from) noexcept
    : Page() {
    *this = ::std::move(from);
  }

  inline Page& operator=(Page&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Page& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Page* internal_default_instance() {
    return reinterpret_cast<const Page*>(
               &_Page_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Page* other);
  friend void swap(Page& a, Page& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Page* New() const PROTOBUF_FINAL { return New(NULL); }

  Page* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Page& from);
  void MergeFrom(const Page& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Page* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lego.Question questions = 4;
  int questions_size() const;
  void clear_questions();
  static const int kQuestionsFieldNumber = 4;
  const ::lego::Question& questions(int index) const;
  ::lego::Question* mutable_questions(int index);
  ::lego::Question* add_questions();
  ::google::protobuf::RepeatedPtrField< ::lego::Question >*
      mutable_questions();
  const ::google::protobuf::RepeatedPtrField< ::lego::Question >&
      questions() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int32 order = 3;
  void clear_order();
  static const int kOrderFieldNumber = 3;
  ::google::protobuf::int32 order() const;
  void set_order(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lego.Page)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::lego::Question > questions_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int32 order_;
  mutable int _cached_size_;
  friend struct ::protobuf_lego_2eproto::TableStruct;
  friend void ::protobuf_lego_2eproto::InitDefaultsPageImpl();
};
// -------------------------------------------------------------------

class Template : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.Template) */ {
 public:
  Template();
  virtual ~Template();

  Template(const Template& from);

  inline Template& operator=(const Template& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Template(Template&& from) noexcept
    : Template() {
    *this = ::std::move(from);
  }

  inline Template& operator=(Template&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Template& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Template* internal_default_instance() {
    return reinterpret_cast<const Template*>(
               &_Template_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Template* other);
  friend void swap(Template& a, Template& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Template* New() const PROTOBUF_FINAL { return New(NULL); }

  Template* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Template& from);
  void MergeFrom(const Template& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Template* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lego.Page pages = 3;
  int pages_size() const;
  void clear_pages();
  static const int kPagesFieldNumber = 3;
  const ::lego::Page& pages(int index) const;
  ::lego::Page* mutable_pages(int index);
  ::lego::Page* add_pages();
  ::google::protobuf::RepeatedPtrField< ::lego::Page >*
      mutable_pages();
  const ::google::protobuf::RepeatedPtrField< ::lego::Page >&
      pages() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:lego.Template)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::lego::Page > pages_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_lego_2eproto::TableStruct;
  friend void ::protobuf_lego_2eproto::InitDefaultsTemplateImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetRequest

// string flag = 1;
inline void GetRequest::clear_flag() {
  flag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::flag() const {
  // @@protoc_insertion_point(field_get:lego.GetRequest.flag)
  return flag_.GetNoArena();
}
inline void GetRequest::set_flag(const ::std::string& value) {
  
  flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.GetRequest.flag)
}
#if LANG_CXX11
inline void GetRequest::set_flag(::std::string&& value) {
  
  flag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.GetRequest.flag)
}
#endif
inline void GetRequest::set_flag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.GetRequest.flag)
}
inline void GetRequest::set_flag(const char* value, size_t size) {
  
  flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.GetRequest.flag)
}
inline ::std::string* GetRequest::mutable_flag() {
  
  // @@protoc_insertion_point(field_mutable:lego.GetRequest.flag)
  return flag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_flag() {
  // @@protoc_insertion_point(field_release:lego.GetRequest.flag)
  
  return flag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_flag(::std::string* flag) {
  if (flag != NULL) {
    
  } else {
    
  }
  flag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), flag);
  // @@protoc_insertion_point(field_set_allocated:lego.GetRequest.flag)
}

// -------------------------------------------------------------------

// LegoRecordField

// string id = 1;
inline void LegoRecordField::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LegoRecordField::id() const {
  // @@protoc_insertion_point(field_get:lego.LegoRecordField.id)
  return id_.GetNoArena();
}
inline void LegoRecordField::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.LegoRecordField.id)
}
#if LANG_CXX11
inline void LegoRecordField::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.LegoRecordField.id)
}
#endif
inline void LegoRecordField::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.LegoRecordField.id)
}
inline void LegoRecordField::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.LegoRecordField.id)
}
inline ::std::string* LegoRecordField::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:lego.LegoRecordField.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LegoRecordField::release_id() {
  // @@protoc_insertion_point(field_release:lego.LegoRecordField.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LegoRecordField::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:lego.LegoRecordField.id)
}

// string name = 2;
inline void LegoRecordField::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LegoRecordField::name() const {
  // @@protoc_insertion_point(field_get:lego.LegoRecordField.name)
  return name_.GetNoArena();
}
inline void LegoRecordField::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.LegoRecordField.name)
}
#if LANG_CXX11
inline void LegoRecordField::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.LegoRecordField.name)
}
#endif
inline void LegoRecordField::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.LegoRecordField.name)
}
inline void LegoRecordField::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.LegoRecordField.name)
}
inline ::std::string* LegoRecordField::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lego.LegoRecordField.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LegoRecordField::release_name() {
  // @@protoc_insertion_point(field_release:lego.LegoRecordField.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LegoRecordField::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lego.LegoRecordField.name)
}

// string data = 3;
inline void LegoRecordField::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LegoRecordField::data() const {
  // @@protoc_insertion_point(field_get:lego.LegoRecordField.data)
  return data_.GetNoArena();
}
inline void LegoRecordField::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.LegoRecordField.data)
}
#if LANG_CXX11
inline void LegoRecordField::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.LegoRecordField.data)
}
#endif
inline void LegoRecordField::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.LegoRecordField.data)
}
inline void LegoRecordField::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.LegoRecordField.data)
}
inline ::std::string* LegoRecordField::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:lego.LegoRecordField.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LegoRecordField::release_data() {
  // @@protoc_insertion_point(field_release:lego.LegoRecordField.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LegoRecordField::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:lego.LegoRecordField.data)
}

// -------------------------------------------------------------------

// LegoRecordSection

// string id = 1;
inline void LegoRecordSection::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LegoRecordSection::id() const {
  // @@protoc_insertion_point(field_get:lego.LegoRecordSection.id)
  return id_.GetNoArena();
}
inline void LegoRecordSection::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.LegoRecordSection.id)
}
#if LANG_CXX11
inline void LegoRecordSection::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.LegoRecordSection.id)
}
#endif
inline void LegoRecordSection::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.LegoRecordSection.id)
}
inline void LegoRecordSection::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.LegoRecordSection.id)
}
inline ::std::string* LegoRecordSection::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:lego.LegoRecordSection.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LegoRecordSection::release_id() {
  // @@protoc_insertion_point(field_release:lego.LegoRecordSection.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LegoRecordSection::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:lego.LegoRecordSection.id)
}

// string name = 2;
inline void LegoRecordSection::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LegoRecordSection::name() const {
  // @@protoc_insertion_point(field_get:lego.LegoRecordSection.name)
  return name_.GetNoArena();
}
inline void LegoRecordSection::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.LegoRecordSection.name)
}
#if LANG_CXX11
inline void LegoRecordSection::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.LegoRecordSection.name)
}
#endif
inline void LegoRecordSection::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.LegoRecordSection.name)
}
inline void LegoRecordSection::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.LegoRecordSection.name)
}
inline ::std::string* LegoRecordSection::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lego.LegoRecordSection.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LegoRecordSection::release_name() {
  // @@protoc_insertion_point(field_release:lego.LegoRecordSection.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LegoRecordSection::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lego.LegoRecordSection.name)
}

// repeated .lego.LegoRecordField fields = 3;
inline int LegoRecordSection::fields_size() const {
  return fields_.size();
}
inline void LegoRecordSection::clear_fields() {
  fields_.Clear();
}
inline const ::lego::LegoRecordField& LegoRecordSection::fields(int index) const {
  // @@protoc_insertion_point(field_get:lego.LegoRecordSection.fields)
  return fields_.Get(index);
}
inline ::lego::LegoRecordField* LegoRecordSection::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:lego.LegoRecordSection.fields)
  return fields_.Mutable(index);
}
inline ::lego::LegoRecordField* LegoRecordSection::add_fields() {
  // @@protoc_insertion_point(field_add:lego.LegoRecordSection.fields)
  return fields_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordField >*
LegoRecordSection::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:lego.LegoRecordSection.fields)
  return &fields_;
}
inline const ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordField >&
LegoRecordSection::fields() const {
  // @@protoc_insertion_point(field_list:lego.LegoRecordSection.fields)
  return fields_;
}

// -------------------------------------------------------------------

// LegoRecord

// string id = 1;
inline void LegoRecord::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LegoRecord::id() const {
  // @@protoc_insertion_point(field_get:lego.LegoRecord.id)
  return id_.GetNoArena();
}
inline void LegoRecord::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.LegoRecord.id)
}
#if LANG_CXX11
inline void LegoRecord::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.LegoRecord.id)
}
#endif
inline void LegoRecord::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.LegoRecord.id)
}
inline void LegoRecord::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.LegoRecord.id)
}
inline ::std::string* LegoRecord::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:lego.LegoRecord.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LegoRecord::release_id() {
  // @@protoc_insertion_point(field_release:lego.LegoRecord.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LegoRecord::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:lego.LegoRecord.id)
}

// string name = 2;
inline void LegoRecord::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LegoRecord::name() const {
  // @@protoc_insertion_point(field_get:lego.LegoRecord.name)
  return name_.GetNoArena();
}
inline void LegoRecord::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.LegoRecord.name)
}
#if LANG_CXX11
inline void LegoRecord::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.LegoRecord.name)
}
#endif
inline void LegoRecord::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.LegoRecord.name)
}
inline void LegoRecord::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.LegoRecord.name)
}
inline ::std::string* LegoRecord::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lego.LegoRecord.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LegoRecord::release_name() {
  // @@protoc_insertion_point(field_release:lego.LegoRecord.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LegoRecord::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lego.LegoRecord.name)
}

// repeated .lego.LegoRecordSection sections = 3;
inline int LegoRecord::sections_size() const {
  return sections_.size();
}
inline void LegoRecord::clear_sections() {
  sections_.Clear();
}
inline const ::lego::LegoRecordSection& LegoRecord::sections(int index) const {
  // @@protoc_insertion_point(field_get:lego.LegoRecord.sections)
  return sections_.Get(index);
}
inline ::lego::LegoRecordSection* LegoRecord::mutable_sections(int index) {
  // @@protoc_insertion_point(field_mutable:lego.LegoRecord.sections)
  return sections_.Mutable(index);
}
inline ::lego::LegoRecordSection* LegoRecord::add_sections() {
  // @@protoc_insertion_point(field_add:lego.LegoRecord.sections)
  return sections_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordSection >*
LegoRecord::mutable_sections() {
  // @@protoc_insertion_point(field_mutable_list:lego.LegoRecord.sections)
  return &sections_;
}
inline const ::google::protobuf::RepeatedPtrField< ::lego::LegoRecordSection >&
LegoRecord::sections() const {
  // @@protoc_insertion_point(field_list:lego.LegoRecord.sections)
  return sections_;
}

// -------------------------------------------------------------------

// LegoResponse

// int32 success = 1;
inline void LegoResponse::clear_success() {
  success_ = 0;
}
inline ::google::protobuf::int32 LegoResponse::success() const {
  // @@protoc_insertion_point(field_get:lego.LegoResponse.success)
  return success_;
}
inline void LegoResponse::set_success(::google::protobuf::int32 value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:lego.LegoResponse.success)
}

// -------------------------------------------------------------------

// Question

// string id = 1;
inline void Question::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Question::id() const {
  // @@protoc_insertion_point(field_get:lego.Question.id)
  return id_.GetNoArena();
}
inline void Question::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.Question.id)
}
#if LANG_CXX11
inline void Question::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.Question.id)
}
#endif
inline void Question::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.Question.id)
}
inline void Question::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.Question.id)
}
inline ::std::string* Question::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:lego.Question.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Question::release_id() {
  // @@protoc_insertion_point(field_release:lego.Question.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Question::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:lego.Question.id)
}

// string title = 2;
inline void Question::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Question::title() const {
  // @@protoc_insertion_point(field_get:lego.Question.title)
  return title_.GetNoArena();
}
inline void Question::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.Question.title)
}
#if LANG_CXX11
inline void Question::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.Question.title)
}
#endif
inline void Question::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.Question.title)
}
inline void Question::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.Question.title)
}
inline ::std::string* Question::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:lego.Question.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Question::release_title() {
  // @@protoc_insertion_point(field_release:lego.Question.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Question::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:lego.Question.title)
}

// int32 response_type = 3;
inline void Question::clear_response_type() {
  response_type_ = 0;
}
inline ::google::protobuf::int32 Question::response_type() const {
  // @@protoc_insertion_point(field_get:lego.Question.response_type)
  return response_type_;
}
inline void Question::set_response_type(::google::protobuf::int32 value) {
  
  response_type_ = value;
  // @@protoc_insertion_point(field_set:lego.Question.response_type)
}

// string description = 4;
inline void Question::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Question::description() const {
  // @@protoc_insertion_point(field_get:lego.Question.description)
  return description_.GetNoArena();
}
inline void Question::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.Question.description)
}
#if LANG_CXX11
inline void Question::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.Question.description)
}
#endif
inline void Question::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.Question.description)
}
inline void Question::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.Question.description)
}
inline ::std::string* Question::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:lego.Question.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Question::release_description() {
  // @@protoc_insertion_point(field_release:lego.Question.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Question::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:lego.Question.description)
}

// int32 order = 5;
inline void Question::clear_order() {
  order_ = 0;
}
inline ::google::protobuf::int32 Question::order() const {
  // @@protoc_insertion_point(field_get:lego.Question.order)
  return order_;
}
inline void Question::set_order(::google::protobuf::int32 value) {
  
  order_ = value;
  // @@protoc_insertion_point(field_set:lego.Question.order)
}

// -------------------------------------------------------------------

// Page

// string id = 1;
inline void Page::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Page::id() const {
  // @@protoc_insertion_point(field_get:lego.Page.id)
  return id_.GetNoArena();
}
inline void Page::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.Page.id)
}
#if LANG_CXX11
inline void Page::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.Page.id)
}
#endif
inline void Page::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.Page.id)
}
inline void Page::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.Page.id)
}
inline ::std::string* Page::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:lego.Page.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Page::release_id() {
  // @@protoc_insertion_point(field_release:lego.Page.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Page::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:lego.Page.id)
}

// string title = 2;
inline void Page::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Page::title() const {
  // @@protoc_insertion_point(field_get:lego.Page.title)
  return title_.GetNoArena();
}
inline void Page::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.Page.title)
}
#if LANG_CXX11
inline void Page::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.Page.title)
}
#endif
inline void Page::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.Page.title)
}
inline void Page::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.Page.title)
}
inline ::std::string* Page::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:lego.Page.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Page::release_title() {
  // @@protoc_insertion_point(field_release:lego.Page.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Page::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:lego.Page.title)
}

// int32 order = 3;
inline void Page::clear_order() {
  order_ = 0;
}
inline ::google::protobuf::int32 Page::order() const {
  // @@protoc_insertion_point(field_get:lego.Page.order)
  return order_;
}
inline void Page::set_order(::google::protobuf::int32 value) {
  
  order_ = value;
  // @@protoc_insertion_point(field_set:lego.Page.order)
}

// repeated .lego.Question questions = 4;
inline int Page::questions_size() const {
  return questions_.size();
}
inline void Page::clear_questions() {
  questions_.Clear();
}
inline const ::lego::Question& Page::questions(int index) const {
  // @@protoc_insertion_point(field_get:lego.Page.questions)
  return questions_.Get(index);
}
inline ::lego::Question* Page::mutable_questions(int index) {
  // @@protoc_insertion_point(field_mutable:lego.Page.questions)
  return questions_.Mutable(index);
}
inline ::lego::Question* Page::add_questions() {
  // @@protoc_insertion_point(field_add:lego.Page.questions)
  return questions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::lego::Question >*
Page::mutable_questions() {
  // @@protoc_insertion_point(field_mutable_list:lego.Page.questions)
  return &questions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::lego::Question >&
Page::questions() const {
  // @@protoc_insertion_point(field_list:lego.Page.questions)
  return questions_;
}

// -------------------------------------------------------------------

// Template

// string id = 1;
inline void Template::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Template::id() const {
  // @@protoc_insertion_point(field_get:lego.Template.id)
  return id_.GetNoArena();
}
inline void Template::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.Template.id)
}
#if LANG_CXX11
inline void Template::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.Template.id)
}
#endif
inline void Template::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.Template.id)
}
inline void Template::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.Template.id)
}
inline ::std::string* Template::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:lego.Template.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Template::release_id() {
  // @@protoc_insertion_point(field_release:lego.Template.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Template::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:lego.Template.id)
}

// string name = 2;
inline void Template::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Template::name() const {
  // @@protoc_insertion_point(field_get:lego.Template.name)
  return name_.GetNoArena();
}
inline void Template::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.Template.name)
}
#if LANG_CXX11
inline void Template::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.Template.name)
}
#endif
inline void Template::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.Template.name)
}
inline void Template::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.Template.name)
}
inline ::std::string* Template::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lego.Template.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Template::release_name() {
  // @@protoc_insertion_point(field_release:lego.Template.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Template::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lego.Template.name)
}

// repeated .lego.Page pages = 3;
inline int Template::pages_size() const {
  return pages_.size();
}
inline void Template::clear_pages() {
  pages_.Clear();
}
inline const ::lego::Page& Template::pages(int index) const {
  // @@protoc_insertion_point(field_get:lego.Template.pages)
  return pages_.Get(index);
}
inline ::lego::Page* Template::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:lego.Template.pages)
  return pages_.Mutable(index);
}
inline ::lego::Page* Template::add_pages() {
  // @@protoc_insertion_point(field_add:lego.Template.pages)
  return pages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::lego::Page >*
Template::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:lego.Template.pages)
  return &pages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::lego::Page >&
Template::pages() const {
  // @@protoc_insertion_point(field_list:lego.Template.pages)
  return pages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lego

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lego_2eproto__INCLUDED
