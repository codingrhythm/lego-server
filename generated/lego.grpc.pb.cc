// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lego.proto

#include "lego.pb.h"
#include "lego.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace lego {

static const char* Lego_method_names[] = {
  "/lego.Lego/SendRecord",
  "/lego.Lego/GetData",
};

std::unique_ptr< Lego::Stub> Lego::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Lego::Stub> stub(new Lego::Stub(channel));
  return stub;
}

Lego::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendRecord_(Lego_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetData_(Lego_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Lego::Stub::SendRecord(::grpc::ClientContext* context, const ::lego::LegoRecord& request, ::lego::LegoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendRecord_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::lego::LegoResponse>* Lego::Stub::AsyncSendRecordRaw(::grpc::ClientContext* context, const ::lego::LegoRecord& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::lego::LegoResponse>::Create(channel_.get(), cq, rpcmethod_SendRecord_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lego::LegoResponse>* Lego::Stub::PrepareAsyncSendRecordRaw(::grpc::ClientContext* context, const ::lego::LegoRecord& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::lego::LegoResponse>::Create(channel_.get(), cq, rpcmethod_SendRecord_, context, request, false);
}

::grpc::Status Lego::Stub::GetData(::grpc::ClientContext* context, const ::lego::GetRequest& request, ::lego::Template* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetData_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::lego::Template>* Lego::Stub::AsyncGetDataRaw(::grpc::ClientContext* context, const ::lego::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::lego::Template>::Create(channel_.get(), cq, rpcmethod_GetData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lego::Template>* Lego::Stub::PrepareAsyncGetDataRaw(::grpc::ClientContext* context, const ::lego::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::lego::Template>::Create(channel_.get(), cq, rpcmethod_GetData_, context, request, false);
}

Lego::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lego_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lego::Service, ::lego::LegoRecord, ::lego::LegoResponse>(
          std::mem_fn(&Lego::Service::SendRecord), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lego_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lego::Service, ::lego::GetRequest, ::lego::Template>(
          std::mem_fn(&Lego::Service::GetData), this)));
}

Lego::Service::~Service() {
}

::grpc::Status Lego::Service::SendRecord(::grpc::ServerContext* context, const ::lego::LegoRecord* request, ::lego::LegoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lego::Service::GetData(::grpc::ServerContext* context, const ::lego::GetRequest* request, ::lego::Template* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace lego

